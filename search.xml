<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用的循环方式及遍历方法</title>
    <url>/2020/09/19/ergodic/</url>
    <content><![CDATA[<h1 id="常用的循环方式及遍历方法"><a href="#常用的循环方式及遍历方法" class="headerlink" title="常用的循环方式及遍历方法"></a>常用的循环方式及遍历方法</h1><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>While 语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) 语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">while</span> (条件) 语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例：</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;i 当前为：&quot;</span> + i);</span><br><span class="line">  i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h2><p>do…while 循环与 while 循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> 语句 <span class="keyword">while</span> (条件</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例：</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); i++;</span><br><span class="line">&#125; <span class="keyword">while</span>(i &lt; x);</span><br></pre></td></tr></table></figure>

<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; filterarray.length; i++) &#123;</span><br><span class="line">  alert(filterarray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;键名：&quot;</span>, i);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;键值：&quot;</span>, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 键名： a // 键值： 1 // 键名： b // 键值： 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 obj为循环的对象， i 为对象中的“键名”。如果对象是数组，那么i就是坐标。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：fo…in 循环一般用于对象的遍历，但是这里有一个坑需要注意：</p>
<p><font color=#FF0000>任何对象都继承了 Object 对象，或者其它对象，继承的类的属性是默认不可遍历的，for… in 循环遍历的时候会跳过，但是这个属性是可以更改为可以遍历的，那么就会造成遍历到不属于自身的属性。</font></p>
</li>
</ul>
<p>举例来说，对象都继承了 toString 属性，但是 for…in 循环不会遍历到这个属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// toString 属性是存在的obj.toString</span></span><br><span class="line"><span class="comment">// toString() &#123; [native code] &#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125; <span class="comment">// 没有任何输出</span></span><br></pre></td></tr></table></figure>

<p>如果继承的属性是可遍历的，那么就会被 for…in 循环遍历到。但如果只想遍历自身的属性，使用 for…in 的时候，应该结合使用 hasOwnProperty 方法，在循环内部判断一下，某个属性是否为对象自身的属性。否则就可以产生遍历失真的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;老张&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// name</span></span><br></pre></td></tr></table></figure>

<h2 id="map-循环"><a href="#map-循环" class="headerlink" title="map()循环"></a>map()循环</h2><p>map 方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>
<p><font color=#ff0000>注意：是返回一个新数组，而不会改变原数组。也不会对空互组进行检测</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">numbers; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>map 方法接受一个函数作为参数。该函数调用时，map 方法向它传入三个参数：当前值、当前位置和数组本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem * index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// [0, 2, 6]</span></span><br></pre></td></tr></table></figure>

<h2 id="forEach-循环"><a href="#forEach-循环" class="headerlink" title="forEach 循环"></a>forEach 循环</h2><p>forEach 方法与 map 方法很相似，也是对数组的所有成员依次执行参数函数。但是，forEach 方法不返回值，只用来操作数据。也就是说，如果数组遍历的目的是为了得到返回值，那么使用 map 方法，否则使用 forEach 方法。forEach 的用法与 map 方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;); <span class="comment">//[a]=0 [b]=1 [c]=2</span></span><br></pre></td></tr></table></figure>

<h2 id="filter-过滤循环"><a href="#filter-过滤循环" class="headerlink" title="filter() 过滤循环"></a>filter() 过滤循环</h2><p>filter 方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为 true 的成员组成一个新数组返回。该方法不会改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[4,5]</span></span><br><span class="line"><span class="comment">// 以上将大于三的成员作为一个新数组返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="keyword">let</span> b = arr.filter(<span class="built_in">Boolean</span>); <span class="comment">//移除所有的false元素</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//[1, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。不会检测空数组，不会改变原始数组,<br>some 方法是只要一个成员的返回值是 true，则整个 some 方法的返回值就是 true，否则返回 false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.some(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; <span class="number">18</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>every 方法则相反，所有成员的返回值都是 true，整个 every 方法才返回 true，否则返回 false。两相比较，some()只要有一个是 true，便返回 true；而 every()只要有一个是 false，便返回 false.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>这两个方法在实际开发中，大有可用之处。比如在判定用户是否勾选了不可操作的数据，或者是否勾选了一条可以操作的数据可以使用这两个方法遍历循环数组。</p>
<h2 id="以上循环特征（相同与不同）"><a href="#以上循环特征（相同与不同）" class="headerlink" title="以上循环特征（相同与不同）"></a>以上循环特征（相同与不同）</h2><h3 id="一：map-，foreach，filter-循环的共同之处"><a href="#一：map-，foreach，filter-循环的共同之处" class="headerlink" title="一：map()，foreach，filter 循环的共同之处"></a>一：map()，foreach，filter 循环的共同之处</h3><p>1.foreach，map，filter 循环中途是无法停止的，总是会将所有成员遍历完。</p>
<p>2.他们都可以接受第二个参数，用来绑定回调函数内部的 this 变量，将回调函数内部的 this 对象，指向第二个参数，间接操作这个参数（一般是数组）。</p>
<h3 id="map-循环和-forEach-循环的不同"><a href="#map-循环和-forEach-循环的不同" class="headerlink" title="map()循环和 forEach 循环的不同"></a>map()循环和 forEach 循环的不同</h3><p>forEach 循环没有返回值；map，filter 循环有返回值</p>
<h3 id="map-循环和-filter-循环都会跳过空位，for-和-while-不会"><a href="#map-循环和-filter-循环都会跳过空位，for-和-while-不会" class="headerlink" title="map()循环和 filter()循环都会跳过空位，for 和 while 不会"></a>map()循环和 filter()循环都会跳过空位，for 和 while 不会</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>].map(A); <span class="comment">//&quot;a&quot;,&quot;a&quot;,&quot;a&quot;</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="literal">null</span>, <span class="number">2</span>].map(A); <span class="comment">//&quot;a&quot;,&quot;a&quot;,&quot;a&quot;</span></span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">1</span>, , <span class="number">2</span>].map(A); <span class="comment">//&quot;a&quot;,empty,&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>].filter(A); <span class="comment">//[1,undefined,2]</span></span><br><span class="line"><span class="keyword">let</span> e = [<span class="number">1</span>, <span class="literal">null</span>, <span class="number">2</span>].filter(A); <span class="comment">//[1,null,2]</span></span><br><span class="line"><span class="keyword">let</span> f = [<span class="number">1</span>, , <span class="number">2</span>].filter(A); <span class="comment">//1,2</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c, d, e, f);</span><br></pre></td></tr></table></figure>

<p>上面代码中，map方法不会跳过undefined和null，但是会跳过空位。forEach方法也会跳过数组的空位，这里就不举例了。</p>
<h3 id="some-和every"><a href="#some-和every" class="headerlink" title="some()和every()"></a>some()和every()</h3><p>some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>在浏览器中输入网址，按下回车之后发生了什么？</title>
    <url>/2020/09/19/text/</url>
    <content><![CDATA[<h2 id="1-URL解析"><a href="#1-URL解析" class="headerlink" title="1.URL解析"></a>1.URL解析</h2><ul>
<li><p>首先判断你输入的是一个合法的URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作</p>
</li>
<li><p>一般浏览器中都支持多种协议，例如http，https，ftp。</p>
<a id="more"></a>
<h2 id="2-DNS-查询"><a href="#2-DNS-查询" class="headerlink" title="2.DNS 查询"></a>2.DNS 查询</h2></li>
</ul>
<p>协议解析之后做 DNS 查询，看这个URL是否被浏览过。如果浏览过，又不做强制刷新，则不会再次请求</p>
<p><strong>1. 浏览器缓存</strong></p>
<p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p>
<p><strong>2. 操作系统缓存</strong></p>
<p>操作系统也有自己的 DNS缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS         服务器发送查询请求。</p>
<p><strong>3. 路由器缓存</strong></p>
<p>路由器也有自己的缓存。</p>
<p><strong>4. ISP DNS 缓存</strong></p>
<p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p>
<h2 id="3-TCP-连接"><a href="#3-TCP-连接" class="headerlink" title="3.TCP 连接"></a>3.TCP 连接</h2><p>​    TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装（应用层、传输层、网络层、链路层）</p>
<h4 id="1、应用层-发送http请求"><a href="#1、应用层-发送http请求" class="headerlink" title="1、应用层:发送http请求"></a>1、应用层:发送http请求</h4><blockquote>
<p>在前面的步骤我们已经得到了服务器IP地址，浏览器会开始创造一个HTTP报文，其中包括:</p>
</blockquote>
<pre><code>    请求报头(Request Header) :请求方法、目标地址、遵循的协议等等
    请求主体(其他参数)</code></pre>
<h4 id="2、传输层-TCP传输报文"><a href="#2、传输层-TCP传输报文" class="headerlink" title="2、传输层: TCP传输报文"></a>2、传输层: TCP传输报文</h4><blockquote>
<p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息<br>在建立连接前，会进行TCP三次握手</p>
</blockquote>
<blockquote>
<p>1、概念：所谓的“三次握手”：为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。<br>为了提供可靠的传送，TCP在发送新的数据之前，以特定的顺序将数据包的序号，并需要这些包传送给目标机之后的确认消息。TCP总是用来发送大批量的数据。当应用程序在收到数据后要做出确认时也要用到TCP。</p>
</blockquote>
<ul>
<li>SYN:请求建立连接</li>
<li>ACK：确认号是否有效<blockquote>
<p>2、过程：</p>
</blockquote>
</li>
<li>第一次握手：建立连接时，客户端发送SYN包到服务器，等待服务器确认。</li>
<li>第二次握手：服务器收到SYN包，确认客户端发来的SYN包同时自己向客户端返回一个SYN包，即SYN+ACK包。</li>
<li>第三次握手：客户端收到服务器发来的SYN+ACK包，向服务器发送一个ACK包，此包发送完毕，进入TCP连接成功状态。<blockquote>
<p>3、通俗理解：</p>
</blockquote>
</li>
<li>第一次：客户端 - - &gt; 服务器 此时服务器知道了客户端要建立连接了。</li>
<li>第二次：客户端 &lt; - - 服务器 此时客户端知道服务器收到连接请求了。</li>
<li>第三次：客户端 - - &gt; 服务器 此时服务器知道客户端收到了自己的回应。<blockquote>
<p>就想想之前听老师讲的一个好理解的:</p>
</blockquote>
</li>
<li>比如你遇见一个喜欢的女生</li>
<li>第一次：向她招手（SYN）</li>
<li>第二次： 她看见你招手后点点头微笑（ACK），同时也向你招手（SYN）</li>
<li>第三次：你看见她向你招手后点点头微笑（ACK）<h4 id="3、网络层-IP协议查询Mac地址"><a href="#3、网络层-IP协议查询Mac地址" class="headerlink" title="3、网络层:IP协议查询Mac地址"></a>3、网络层:IP协议查询Mac地址</h4>将数据段打包，并加入源及目标的IP地址，并且负责寻找传输路线。</li>
</ul>
<p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p>
<blockquote>
<p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p>
</blockquote>
<h4 id="4、链路层：以太网协议"><a href="#4、链路层：以太网协议" class="headerlink" title="4、链路层：以太网协议"></a>4、链路层：以太网协议</h4><h5 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h5><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p>
<ul>
<li><p>标头：数据包的发送者、接受者、数据类型</p>
</li>
<li><p>数据：数据包具体内容</p>
<h5 id="Mac地址"><a href="#Mac地址" class="headerlink" title="Mac地址"></a>Mac地址</h5><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p>
<h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p>
<h5 id="注意：-接收方回应是单播"><a href="#注意：-接收方回应是单播" class="headerlink" title="注意： 接收方回应是单播"></a>注意： 接收方回应是单播</h5><h2 id="4-服务器处理请求"><a href="#4-服务器处理请求" class="headerlink" title="4.服务器处理请求"></a>4.服务器处理请求</h2><h5 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h5><p>接受 TCP 报文后，会对连接进行处理，对HTTP协议进行解析（请求方法、域名、路径等），并且进行一些验    证：</p>
</li>
<li><p>验证是否配置虚拟主机</p>
</li>
<li><p>验证虚拟主机是否接受此方法</p>
</li>
<li><p>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</p>
</li>
</ul>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>假如服务器配置了 HTTP 重定向，就会返回一个 301永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。<br><a href="https://www.cnblogs.com/workest/p/3891321.html">详情请看这里</a></p>
<h5 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h5><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js文件等，则会直接把这个文件返回。</p>
<p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p>
<p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p>
<h2 id="5-浏览器接受响应"><a href="#5-浏览器接受响应" class="headerlink" title="5.浏览器接受响应"></a>5.浏览器接受响应</h2><ul>
<li><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。<br>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p>
</li>
<li><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p>
</li>
<li><p>然后，对响应资源做缓存。</p>
</li>
<li><p>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image各有不同的解析方式）。</p>
</li>
</ul>
<h2 id="6-渲染页面"><a href="#6-渲染页面" class="headerlink" title="6.渲染页面"></a>6.渲染页面</h2><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><h4 id="1、HTML解析"><a href="#1、HTML解析" class="headerlink" title="1、HTML解析"></a>1、HTML解析</h4><p>首先要知道浏览器解析是崇尚往下一行一行的解析<br>解析的过程可以分为四个步骤</p>
<h5 id="1、解码-encoding"><a href="#1、解码-encoding" class="headerlink" title="1、解码(encoding)"></a>1、解码(encoding)</h5><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如UTF-8）转换成字符串，也就是HTML 代码。</p>
<h5 id="2、预解析-pre-parsing"><a href="#2、预解析-pre-parsing" class="headerlink" title="2、预解析(pre-parsing)"></a>2、预解析(pre-parsing)</h5><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如img标签的src属性，并将这个请求加到请求队列中</p>
<h5 id="3、符号化-Tokenization"><a href="#3、符号化-Tokenization" class="headerlink" title="3、符号化(Tokenization)"></a>3、符号化(Tokenization)</h5><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p>
<h5 id="4、构建树-tree-construction"><a href="#4、构建树-tree-construction" class="headerlink" title="4、构建树(tree construction)"></a>4、构建树(tree construction)</h5><blockquote>
<p>注意:符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p>
</blockquote>
<h4 id="2、css解析"><a href="#2、css解析" class="headerlink" title="2、css解析"></a>2、css解析</h4><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据语法规范解析出所有的 CSS 并进行标记化，然后我们得到一个规则表</p>
<h5 id="css匹配规则"><a href="#css匹配规则" class="headerlink" title="css匹配规则"></a>css匹配规则</h5><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：div p { font-size :14px }会先寻找所有的p标签然后判断它的父元素是否为div。</p>
<p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p>
<h4 id="3、渲染树"><a href="#3、渲染树" class="headerlink" title="3、渲染树"></a>3、渲染树</h4><ul>
<li>其实这就是一个 DOM 树和 CSS 规则树合并的过程。<blockquote>
<p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了display:none的节点</p>
</blockquote>
<h5 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h5></li>
</ul>
<p>通过计算让任何尺寸值都减少到三个可能之一：auto、百分比、px，比如把rem转化为px。</p>
<h5 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h5><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做specificity的公式，这个公式会通过：</p>
<ul>
<li>标签名、class、id</li>
<li>是否内联样式</li>
<li>!important</li>
</ul>
<p>然后得出一个权重值，取最高的那个。</p>
<h5 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h5><p>当遇到一个script标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p>
<p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p>
<p>所有我们知道：</p>
<ul>
<li>CSS 会阻塞 JS 执行</li>
<li>JS 会阻塞后面的 DOM 解析</li>
</ul>
<p>为了避免这种情况，应该以下原则：</p>
<ul>
<li>CSS 资源排在 JavaScript 资源前面</li>
<li>JS 放在 HTML 最底部，也就是 </body>前<br><a href="https://github.com/xiaoyu2er/blog/issues/8">另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：</a></li>
</ul>
<h4 id="4、布局与绘制"><a href="#4、布局与绘制" class="headerlink" title="4、布局与绘制"></a>4、布局与绘制</h4><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p>
<p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p>
<h4 id="5、合并渲染层"><a href="#5、合并渲染层" class="headerlink" title="5、合并渲染层"></a>5、合并渲染层</h4><p>把以上绘制的所有图片合并，最终输出一张图片</p>
<h4 id="6、回流与重绘"><a href="#6、回流与重绘" class="headerlink" title="6、回流与重绘"></a>6、回流与重绘</h4><h5 id="回流-reflow"><a href="#回流-reflow" class="headerlink" title="回流(reflow)"></a>回流(reflow)</h5><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从html标签开始递归往下，重新计算位置和大小。</p>
<p>reflow基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p>
<h5 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘(repaint)"></a>重绘(repaint)</h5><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p>
<p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p>
<p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p>
<p>比如：</p>
<ul>
<li>display:none 会触发回流，而 visibility:hidden 只会触发重绘。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>获取用户信息</title>
    <url>/2020/11/01/User/</url>
    <content><![CDATA[<h1 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h1><p>获取用户信息有一种方式wx.getUserInfo，但是这个东西不能直接调用，除非用户已经授权。</p>
<h2 id="用户未授权时"><a href="#用户未授权时" class="headerlink" title="用户未授权时"></a>用户未授权时</h2><p>用户未授权时，我们需要给用户提供一个可点击的按钮，当用户点击该按钮时，我们获取用户的相关userInfo</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span> <span class="attr">bindgetuserinfo</span>=<span class="string">&quot;getUserInfo&quot;</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当用户授权后，获取到用户信息应该存放在app.globalData中，可以方便其他页面使用</p>
<a id="more"></a>
<h2 id="如果用户已经授权"><a href="#如果用户已经授权" class="headerlink" title="如果用户已经授权"></a>如果用户已经授权</h2><p>app.js加载后会判断用户是否授权，如果已经授权，则直接通过wx.getUserInfo获取用户信息，但是如果首页就需要使用用户信息。那么我们就需要在首页进行操作</p>
<ol>
<li>判断app.globalData中是否有userInfo数据，如果没有，则设置给app一个方法，等待app.js中得到对应的userInfo调用该方法，并把结果作为参数传递</li>
<li>如果有，则直接使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getUserInfo (e) &#123;</span><br><span class="line">  <span class="comment">// 点击按钮获取到用户权限并获取用户信息</span></span><br><span class="line">  <span class="comment">// 把数据设置给app.js中的globalData 方便其他页面取用</span></span><br><span class="line">  app.globalData.userInfo = e.detail.userInfo</span><br><span class="line">  <span class="comment">// 把数据设置到当前页面，方便当前页面使用</span></span><br><span class="line">  <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">    userInfo: e.detail.userInfo,</span><br><span class="line">    hasUserInfo: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离跨域问题</title>
    <url>/2020/11/01/Cross%20domain/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th align="center">开发环境</th>
<th align="center">生产环境</th>
</tr>
</thead>
<tbody><tr>
<td>后台主导</td>
<td align="center">CORS</td>
<td align="center">CORS</td>
</tr>
<tr>
<td>前端主导</td>
<td align="center">proxy代理</td>
<td align="center">nginx代理</td>
</tr>
</tbody></table>
<h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: <span class="string">&quot;后台接口地址&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>配置完proxy之后，我们请求接口的地址需要是当前前端服务的地址</p>
<p><a href="http://localhost:3000/">http://localhost:3000</a> -&gt; <a href="http://localhost:8080/">http://localhost:8080</a></p>
<p>既然要请求自己的地址，那么就没有必要写localhost:8080 直接写/即可</p>
<p><a href="http://localhost:8080/api/banners">http://localhost:8080/api/banners</a> -&gt; /api/banners</p>
<p>如果使用代理，那么就没有必要使用.env中去进行我们对应的接口地址的配置。因为不管在什么环境下，都是请求当前前端服务器地址</p>
<p><strong>如果使用CORS 则需要在build时根据.env去请求不同环境的服务器地址， 如果使用代理，则不需要配置不同地址，全部都使用<code>/api/xxx</code>的形式</strong></p>
<h2 id="后台配置CORS"><a href="#后台配置CORS" class="headerlink" title="后台配置CORS"></a>后台配置CORS</h2><p>前端需要在axios的配置中配置baseURL。前提需要先配置好.env环境变量文件</p>
<h3 id="env-development"><a href="#env-development" class="headerlink" title=".env.development"></a>.env.development</h3><p>新建开发环境的env文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VUE_APP_BASEURL&#x3D;http:&#x2F;&#x2F;开发环境接口地址</span><br></pre></td></tr></table></figure>

<h3 id="env-production"><a href="#env-production" class="headerlink" title=".env.production"></a>.env.production</h3><p>新建生产环境的env文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VUE_APP_BASEURL&#x3D;http:&#x2F;&#x2F;生产环境接口地址</span><br></pre></td></tr></table></figure>

<h3 id="配置axios"><a href="#配置axios" class="headerlink" title="配置axios"></a>配置axios</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _axios = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASEURL</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h2><p>如果使用代理，则前端不需要再配置BASEURL，因为请求全部走的前端服务（代理）</p>
<p>接口地址直接写 “/xxx” 相关的内容即可</p>
<h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><p>vue.config.js</p>
<h4 id="如果只有一个后台"><a href="#如果只有一个后台" class="headerlink" title="如果只有一个后台"></a>如果只有一个后台</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    </span><br><span class="line">    proxy: <span class="string">&quot;http://开发环境后台地址&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如果有多个后台接口"><a href="#如果有多个后台接口" class="headerlink" title="如果有多个后台接口"></a>如果有多个后台接口</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/自定义前端请求时前缀&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;http://开发环境后台地址&quot;</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;^/自定义前端请求时前缀&quot;</span>: <span class="string">&quot;/后台真实前缀&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;/自定义前端请求时前缀&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;http://开发环境后台地址&quot;</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;^/自定义前端请求时前缀&quot;</span>: <span class="string">&quot;/后台真实前缀&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>注意，在请求时，不需要配置axios的baseURL，也不需要添加任何的域名</em></strong></p>
<h3 id="生产环境中"><a href="#生产环境中" class="headerlink" title="生产环境中"></a>生产环境中</h3><p>build之后，我们不再有nodejs服务器，只是静态页面（proxy设置只能针对开发环境）</p>
<p>生产环境需要配置nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  localhost;</span><br><span class="line"></span><br><span class="line">  #charset koi8-r;</span><br><span class="line"></span><br><span class="line">  #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    # 只能有一个</span><br><span class="line">    # 没有使用history </span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    # 使用了history</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 配置代理</span><br><span class="line">  location &#x2F;服务器前缀 &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;要代理的服务器地址（生产服务器地址）;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 配置代理 需要进行rewrite</span><br><span class="line">  location &#x2F;前端请求的前缀 &#123;</span><br><span class="line">    rewrite  ^&#x2F;前端请求前缀&#x2F;(.*)$ &#x2F;后台接口真实前缀&#x2F;$1 break;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;要代理的服务器地址（生产服务器地址）;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">  location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">      root   html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
