<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>在浏览器中输入网址，按下回车之后发生了什么？</title>
    <url>/2020/09/19/text/</url>
    <content><![CDATA[<h2 id="1-URL解析"><a href="#1-URL解析" class="headerlink" title="1.URL解析"></a>1.URL解析</h2><ul>
<li><p>首先判断你输入的是一个合法的URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作</p>
</li>
<li><p>一般浏览器中都支持多种协议，例如http，https，ftp。</p>
<a id="more"></a>
<h2 id="2-DNS-查询"><a href="#2-DNS-查询" class="headerlink" title="2.DNS 查询"></a>2.DNS 查询</h2></li>
</ul>
<p>协议解析之后做 DNS 查询，看这个URL是否被浏览过。如果浏览过，又不做强制刷新，则不会再次请求</p>
<p><strong>1. 浏览器缓存</strong></p>
<p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p>
<p><strong>2. 操作系统缓存</strong></p>
<p>操作系统也有自己的 DNS缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS         服务器发送查询请求。</p>
<p><strong>3. 路由器缓存</strong></p>
<p>路由器也有自己的缓存。</p>
<p><strong>4. ISP DNS 缓存</strong></p>
<p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p>
<h2 id="3-TCP-连接"><a href="#3-TCP-连接" class="headerlink" title="3.TCP 连接"></a>3.TCP 连接</h2><p>​    TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装（应用层、传输层、网络层、链路层）</p>
<h4 id="1、应用层-发送http请求"><a href="#1、应用层-发送http请求" class="headerlink" title="1、应用层:发送http请求"></a>1、应用层:发送http请求</h4><blockquote>
<p>在前面的步骤我们已经得到了服务器IP地址，浏览器会开始创造一个HTTP报文，其中包括:</p>
</blockquote>
<pre><code>    请求报头(Request Header) :请求方法、目标地址、遵循的协议等等
    请求主体(其他参数)</code></pre>
<h4 id="2、传输层-TCP传输报文"><a href="#2、传输层-TCP传输报文" class="headerlink" title="2、传输层: TCP传输报文"></a>2、传输层: TCP传输报文</h4><blockquote>
<p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息<br>在建立连接前，会进行TCP三次握手</p>
</blockquote>
<blockquote>
<p>1、概念：所谓的“三次握手”：为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。<br>为了提供可靠的传送，TCP在发送新的数据之前，以特定的顺序将数据包的序号，并需要这些包传送给目标机之后的确认消息。TCP总是用来发送大批量的数据。当应用程序在收到数据后要做出确认时也要用到TCP。</p>
</blockquote>
<ul>
<li>SYN:请求建立连接</li>
<li>ACK：确认号是否有效<blockquote>
<p>2、过程：</p>
</blockquote>
</li>
<li>第一次握手：建立连接时，客户端发送SYN包到服务器，等待服务器确认。</li>
<li>第二次握手：服务器收到SYN包，确认客户端发来的SYN包同时自己向客户端返回一个SYN包，即SYN+ACK包。</li>
<li>第三次握手：客户端收到服务器发来的SYN+ACK包，向服务器发送一个ACK包，此包发送完毕，进入TCP连接成功状态。<blockquote>
<p>3、通俗理解：</p>
</blockquote>
</li>
<li>第一次：客户端 - - &gt; 服务器 此时服务器知道了客户端要建立连接了。</li>
<li>第二次：客户端 &lt; - - 服务器 此时客户端知道服务器收到连接请求了。</li>
<li>第三次：客户端 - - &gt; 服务器 此时服务器知道客户端收到了自己的回应。<blockquote>
<p>就想想之前听老师讲的一个好理解的:</p>
</blockquote>
</li>
<li>比如你遇见一个喜欢的女生</li>
<li>第一次：向她招手（SYN）</li>
<li>第二次： 她看见你招手后点点头微笑（ACK），同时也向你招手（SYN）</li>
<li>第三次：你看见她向你招手后点点头微笑（ACK）<h4 id="3、网络层-IP协议查询Mac地址"><a href="#3、网络层-IP协议查询Mac地址" class="headerlink" title="3、网络层:IP协议查询Mac地址"></a>3、网络层:IP协议查询Mac地址</h4>将数据段打包，并加入源及目标的IP地址，并且负责寻找传输路线。</li>
</ul>
<p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p>
<blockquote>
<p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p>
</blockquote>
<h4 id="4、链路层：以太网协议"><a href="#4、链路层：以太网协议" class="headerlink" title="4、链路层：以太网协议"></a>4、链路层：以太网协议</h4><h5 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h5><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p>
<ul>
<li><p>标头：数据包的发送者、接受者、数据类型</p>
</li>
<li><p>数据：数据包具体内容</p>
<h5 id="Mac地址"><a href="#Mac地址" class="headerlink" title="Mac地址"></a>Mac地址</h5><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p>
<h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p>
<h5 id="注意：-接收方回应是单播"><a href="#注意：-接收方回应是单播" class="headerlink" title="注意： 接收方回应是单播"></a>注意： 接收方回应是单播</h5><h2 id="4-服务器处理请求"><a href="#4-服务器处理请求" class="headerlink" title="4.服务器处理请求"></a>4.服务器处理请求</h2><h5 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h5><p>接受 TCP 报文后，会对连接进行处理，对HTTP协议进行解析（请求方法、域名、路径等），并且进行一些验    证：</p>
</li>
<li><p>验证是否配置虚拟主机</p>
</li>
<li><p>验证虚拟主机是否接受此方法</p>
</li>
<li><p>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</p>
</li>
</ul>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>假如服务器配置了 HTTP 重定向，就会返回一个 301永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。<br><a href="https://www.cnblogs.com/workest/p/3891321.html">详情请看这里</a></p>
<h5 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h5><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js文件等，则会直接把这个文件返回。</p>
<p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p>
<p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p>
<h2 id="5-浏览器接受响应"><a href="#5-浏览器接受响应" class="headerlink" title="5.浏览器接受响应"></a>5.浏览器接受响应</h2><ul>
<li><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。<br>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p>
</li>
<li><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p>
</li>
<li><p>然后，对响应资源做缓存。</p>
</li>
<li><p>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image各有不同的解析方式）。</p>
</li>
</ul>
<h2 id="6-渲染页面"><a href="#6-渲染页面" class="headerlink" title="6.渲染页面"></a>6.渲染页面</h2><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><h4 id="1、HTML解析"><a href="#1、HTML解析" class="headerlink" title="1、HTML解析"></a>1、HTML解析</h4><p>首先要知道浏览器解析是崇尚往下一行一行的解析<br>解析的过程可以分为四个步骤</p>
<h5 id="1、解码-encoding"><a href="#1、解码-encoding" class="headerlink" title="1、解码(encoding)"></a>1、解码(encoding)</h5><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如UTF-8）转换成字符串，也就是HTML 代码。</p>
<h5 id="2、预解析-pre-parsing"><a href="#2、预解析-pre-parsing" class="headerlink" title="2、预解析(pre-parsing)"></a>2、预解析(pre-parsing)</h5><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如img标签的src属性，并将这个请求加到请求队列中</p>
<h5 id="3、符号化-Tokenization"><a href="#3、符号化-Tokenization" class="headerlink" title="3、符号化(Tokenization)"></a>3、符号化(Tokenization)</h5><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p>
<h5 id="4、构建树-tree-construction"><a href="#4、构建树-tree-construction" class="headerlink" title="4、构建树(tree construction)"></a>4、构建树(tree construction)</h5><blockquote>
<p>注意:符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p>
</blockquote>
<h4 id="2、css解析"><a href="#2、css解析" class="headerlink" title="2、css解析"></a>2、css解析</h4><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据语法规范解析出所有的 CSS 并进行标记化，然后我们得到一个规则表</p>
<h5 id="css匹配规则"><a href="#css匹配规则" class="headerlink" title="css匹配规则"></a>css匹配规则</h5><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：div p { font-size :14px }会先寻找所有的p标签然后判断它的父元素是否为div。</p>
<p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p>
<h4 id="3、渲染树"><a href="#3、渲染树" class="headerlink" title="3、渲染树"></a>3、渲染树</h4><ul>
<li>其实这就是一个 DOM 树和 CSS 规则树合并的过程。<blockquote>
<p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了display:none的节点</p>
</blockquote>
<h5 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h5></li>
</ul>
<p>通过计算让任何尺寸值都减少到三个可能之一：auto、百分比、px，比如把rem转化为px。</p>
<h5 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h5><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做specificity的公式，这个公式会通过：</p>
<ul>
<li>标签名、class、id</li>
<li>是否内联样式</li>
<li>!important</li>
</ul>
<p>然后得出一个权重值，取最高的那个。</p>
<h5 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h5><p>当遇到一个script标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p>
<p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p>
<p>所有我们知道：</p>
<ul>
<li>CSS 会阻塞 JS 执行</li>
<li>JS 会阻塞后面的 DOM 解析</li>
</ul>
<p>为了避免这种情况，应该以下原则：</p>
<ul>
<li>CSS 资源排在 JavaScript 资源前面</li>
<li>JS 放在 HTML 最底部，也就是 </body>前<br><a href="https://github.com/xiaoyu2er/blog/issues/8">另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：</a></li>
</ul>
<h4 id="4、布局与绘制"><a href="#4、布局与绘制" class="headerlink" title="4、布局与绘制"></a>4、布局与绘制</h4><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p>
<p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p>
<h4 id="5、合并渲染层"><a href="#5、合并渲染层" class="headerlink" title="5、合并渲染层"></a>5、合并渲染层</h4><p>把以上绘制的所有图片合并，最终输出一张图片</p>
<h4 id="6、回流与重绘"><a href="#6、回流与重绘" class="headerlink" title="6、回流与重绘"></a>6、回流与重绘</h4><h5 id="回流-reflow"><a href="#回流-reflow" class="headerlink" title="回流(reflow)"></a>回流(reflow)</h5><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从html标签开始递归往下，重新计算位置和大小。</p>
<p>reflow基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p>
<h5 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘(repaint)"></a>重绘(repaint)</h5><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p>
<p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p>
<p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p>
<p>比如：</p>
<ul>
<li>display:none 会触发回流，而 visibility:hidden 只会触发重绘。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
